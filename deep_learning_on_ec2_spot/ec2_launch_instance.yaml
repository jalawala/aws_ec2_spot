---
AWSTemplateFormatVersion: 2010-09-09
Description: 'This is CFN Template creates a EC2 Instance for your deployment or for testing'
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      DLAMIAMAZONLINUX2: ami-0b0b075706e19de29
      DLAMIUBUNTU1604: ami-06306b7120b778175
      DLBASEAMIUBUNTU1604: ami-0881ccbe7147fe70f
      DLBASEAMIUBUNTU1804: ami-0e60fa461a16192c0

Metadata:
  Author:
    Description: Jayaprakash Alawala <alawalajp@gmail.com>
  License:
    Description: 'Copyright [2020] [Jayaprakash Alawala]

                  Licensed under the Apache License, Version 2.0 (the "License");
                  you may not use this file except in compliance with the License.
                  You may obtain a copy of the License at

                    http://www.apache.org/licenses/LICENSE-2.0

                  Unless required by applicable law or agreed to in writing, software
                  distributed under the License is distributed on an "AS IS" BASIS,
                  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                  See the License for the specific language governing permissions and
                  limitations under the License.'


Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value: !Ref AWS::Region

  CTCSecurityGroup:
    Description: CTCSecurityGroup
    Value: !Ref CTCSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-CTCSecurityGroup'

  CTCDLInstancePublicIp:
    Description: CTCDLInstance Public IP
    Value: !GetAtt CTCDLInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIp"

Parameters:
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh/http access and load balancer http
      access
    Type: String

  NetworkStackName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: CTCVPC

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'CTC-KeyPair'
    MinLength: 1

Resources:

  CTCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CTC Security Group to allow the SSH and Web access from Internet
      GroupName: "CTCSecurityGroup"
      SecurityGroupIngress:
        - CidrIp:
            Ref: sourceCidr
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-CTCVPC'


  CTCDLInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - CTCSecurityGroup
    Properties:
      InstanceType: m4.xlarge
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: "CTCDLInstance"
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - DLAMIUBUNTU1604
      NetworkInterfaces:
        - GroupSet:
            - !Ref CTCSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !ImportValue
            'Fn::Sub': '${NetworkStackName}-CTCPublicSubnet1'

  CTCDLVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: '100'
      AvailabilityZone: !Select [0, !GetAZs '']
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: DL-datasets-checkpoints

  CTCEC2VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref CTCDLInstance
      VolumeId: !Ref CTCDLVolume

...
